"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
https://habr.com/ru/post/275813/

def numbers (self):
    num= input("введите целое число")
    map(int, str(num))


def recursion(num):
    map(int, str(num))
    x=0
    if num[x]//2 == 0:
        return even+=1
        x+=1
    elif len(num)==0:
        return print("even"- even, "odd"- odd)
    else:
        return odd+=1
        x+=1
    """Рекурсия"""
    # базовый случай
    # последний шаг рекурсии
    if a == b:
        return str(a)
    # шаг рекурсии
    # рекурсивное условие
    elif a > b:
        return f'{str(a)} {recursion(a - 1, b)}'
    # шаг рекурсии
    # рекурсивное условие
    elif a < b:
        return f'{str(a)} {recursion(a + 1, b)}'


print(recursion(20, 15))
print(recursion(10, 15))